name: Yarn Audit Fix and PR

on:
  workflow_dispatch:
    inputs:
      base_branch:
        required: false
        type: string
        default: "main"
      pr_title:
        required: false
        type: string
        default: "fix: Apply Yarn audit fix"
      pr_body:
        required: false
        type: string
        default: "This PR applies security updates via `yarn-audit-fix`."

permissions:
  contents: write
  pull-requests: write

jobs:
  yarn-audit-fix:
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - name: Checkout Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set Up Node.js
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Run Yarn Audit Fix (Third-Party)
        run: |
          npx yarn-audit-fix || echo "No fixes needed"

      - name: Build Project
        run: |
          if yarn run | grep -q "build"; then
            yarn build
          else
            echo "No build script found, skipping build step."
          fi


      - name: Check for Changes
        id: check_changes
        run: |
          git add .
          if git diff --cached --exit-code; then
            echo "No changes to commit."
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "changes=true" >> $GITHUB_ENV
          fi

      - name: Get Latest Commit SHA from Base Branch
        if: env.changes == 'true'
        id: get_sha
        run: |
          echo "Fetching latest commit SHA from ${{ inputs.base_branch }}..."
          SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ inputs.base_branch }} | jq -r .object.sha)
          echo "sha=$SHA" >> $GITHUB_ENV

      - name: Create New Branch Using API
        if: env.changes == 'true'
        id: create_branch
        run: |
          BRANCH_NAME="yarn-audit-fix-$(date +'%Y-%m-%d-%H-%M-%S')"

          echo "Creating a new branch: $BRANCH_NAME..."
          curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"ref\":\"refs/heads/$BRANCH_NAME\", \"sha\":\"${{ env.sha }}\"}" \
            https://api.github.com/repos/${{ github.repository }}/git/refs

          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Commit Changes Using GitHub API
        if: env.changes == 'true'
        run: |
          echo "Committing changes to $BRANCH_NAME..."
          FILES_CHANGED=$(git status --porcelain | awk '{print $2}')
          for file in $FILES_CHANGED; do
            CONTENT=$(base64 -w 0 $file)
            FILENAME=$(basename $file)
            SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=${{ env.BRANCH_NAME }} | jq -r .sha)
            if [ "$SHA" == "null" ]; then
              SHA=""
            fi

            # Store JSON payload in a temporary file
            JSON_PAYLOAD=$(mktemp)
            echo "{
              \"message\": \"fix: apply Yarn audit fix\",
              \"content\": \"$CONTENT\",
              \"branch\": \"${{ env.BRANCH_NAME }}\",
              \"sha\": \"$SHA\"
            }" > $JSON_PAYLOAD

            # Use --data-binary to send the payload
            curl -s -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data-binary @"$JSON_PAYLOAD" \
              https://api.github.com/repos/${{ github.repository }}/contents/$file
          done

      - name: Create Pull Request Using API
        if: env.changes == 'true'
        run: |
          echo "Creating a pull request..."
          
          ESCAPED_TITLE=$(echo "${{ inputs.pr_title }}" | jq -Rsa .)
          ESCAPED_BODY=$(echo "${{ inputs.pr_body }}" | jq -Rsa .)

          API_RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{
              \"title\": $ESCAPED_TITLE,
              \"body\": $ESCAPED_BODY,
              \"head\": \"${{ env.BRANCH_NAME }}\",
              \"base\": \"${{ inputs.base_branch }}\",
              \"draft\": false
            }" "https://api.github.com/repos/${{ github.repository }}/pulls")

          echo "API Response: $API_RESPONSE"

          PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')

          if [[ "$PR_URL" == "null" ]]; then
            echo "❌ Error: PR creation failed. Check API response above."
            exit 1
          else
            echo "✅ Pull Request created: $PR_URL"
          fi
